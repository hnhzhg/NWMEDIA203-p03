"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var logging = require("../core/logging");
var SamplingLayer = (function (_super) {
    __extends(SamplingLayer, _super);
    function SamplingLayer() {
        return _super.call(this, {}) || this;
    }
    SamplingLayer.prototype.computeOutputShape = function (inputShape) {
        return inputShape[0];
    };
    SamplingLayer.prototype.call = function (inputs) {
        return tf.tidy(function () {
            var mu = inputs[0], sigma = inputs[1];
            return tf.add(tf.mul(tf.randomNormal(sigma.shape), sigma), mu);
        });
    };
    SamplingLayer.prototype.getClassName = function () {
        return 'SamplingLayer';
    };
    return SamplingLayer;
}(tf.layers.Layer));
var MidiMe = (function () {
    function MidiMe(config) {
        if (config === void 0) { config = {}; }
        this.trained = false;
        this.initialized = false;
        this.config = {
            encoder_layers: config.encoder_layers || [1024, 256, 64],
            decoder_layers: config.decoder_layers || [64, 256, 1024],
            input_size: config.input_size || 256,
            output_size: config.output_size || 4,
            beta: config.beta || 1,
            epochs: config.epochs || 10
        };
    }
    MidiMe.prototype.dispose = function () {
        if (!this.initialized) {
            return;
        }
        this.encoder.dispose();
        this.decoder.dispose();
        this.vae.dispose();
        this.initialized = false;
    };
    MidiMe.prototype.initialize = function () {
        this.dispose();
        var startTime = performance.now();
        var x = tf.input({ shape: [this.config['input_size']] });
        this.encoder = this.getEncoder(x);
        var _a = this.encoder.apply(x), z = _a[0];
        this.decoder = this.getDecoder(z.shape.slice(1));
        var y = this.decoder.apply(z);
        this.vae = tf.model({ inputs: x, outputs: y, name: 'vae' });
        this.initialized = true;
        logging.logWithDuration('Initialized model', startTime, 'MidiMe');
    };
    MidiMe.prototype.train = function (xTrain, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var startTime, optimizer, _loop_1, e;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startTime = performance.now();
                        this.trained = false;
                        optimizer = tf.train.adam();
                        _loop_1 = function (e) {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, tf.nextFrame()];
                                    case 1:
                                        _a.sent();
                                        return [4, optimizer.minimize(function () {
                                                return tf.tidy(function () {
                                                    var _a = _this.encoder.predict(xTrain), zMu = _a[1], zSigma = _a[2];
                                                    var y = _this.vae.predict(xTrain);
                                                    var loss = _this.loss(zMu, zSigma, y, xTrain);
                                                    if (callback) {
                                                        callback(e, {
                                                            y: y,
                                                            total: loss.totalLoss.arraySync(),
                                                            losses: [loss.reconLoss.arraySync(), loss.latentLoss.arraySync()]
                                                        });
                                                    }
                                                    return loss.totalLoss;
                                                });
                                            })];
                                    case 2:
                                        _a.sent();
                                        return [4, tf.nextFrame()];
                                    case 3:
                                        _a.sent();
                                        return [2];
                                }
                            });
                        };
                        e = 0;
                        _a.label = 1;
                    case 1:
                        if (!(e < this.config.epochs)) return [3, 4];
                        return [5, _loop_1(e)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        e++;
                        return [3, 1];
                    case 4:
                        logging.logWithDuration('Training finished', startTime, 'MidiMe');
                        this.trained = true;
                        optimizer.dispose();
                        return [2];
                }
            });
        });
    };
    MidiMe.prototype.sample = function (numSamples) {
        if (numSamples === void 0) { numSamples = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.initialized) return [3, 2];
                        return [4, this.initialize()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2, tf.tidy(function () {
                            var randZs = tf.randomNormal([numSamples, _this.config['output_size']]);
                            return _this.decoder.predict(randZs);
                        })];
                }
            });
        });
    };
    MidiMe.prototype.decode = function (z) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.initialized) return [3, 2];
                        return [4, this.initialize()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2, this.decoder.predict(z)];
                }
            });
        });
    };
    MidiMe.prototype.predict = function (z) {
        return this.vae.predict(z);
    };
    MidiMe.prototype.getEncoder = function (input) {
        var x = input;
        for (var i = 0; i < this.config['encoder_layers'].length; i++) {
            x = tf.layers
                .dense({ units: this.config['encoder_layers'][i], activation: 'relu' })
                .apply(x);
        }
        var mu = this.getAffineLayers(x, this.config['output_size'], input, false);
        var sigma = this.getAffineLayers(x, this.config['output_size'], input, true);
        var z = new SamplingLayer().apply([mu, sigma]);
        return tf.model({ inputs: input, outputs: [z, mu, sigma], name: 'encoder' });
    };
    MidiMe.prototype.getDecoder = function (shape) {
        var z = tf.input({ shape: shape });
        var x = z;
        for (var i = 0; i < this.config['decoder_layers'].length; i++) {
            x = tf.layers
                .dense({ units: this.config['decoder_layers'][i], activation: 'relu' })
                .apply(x);
        }
        var mu = this.getAffineLayers(x, this.config['input_size'], z, false);
        return tf.model({ inputs: z, outputs: mu, name: 'decoder' });
    };
    MidiMe.prototype.loss = function (zMu, zSigma, yPred, yTrue) {
        var _this = this;
        return tf.tidy(function () {
            var latentLoss = _this.klLoss(zMu, zSigma);
            var reconLoss = _this.reconstructionLoss(yTrue, yPred);
            var totalLoss = tf.add(reconLoss, tf.mul(latentLoss, _this.config['beta']));
            return { latentLoss: latentLoss, reconLoss: reconLoss, totalLoss: totalLoss };
        });
    };
    MidiMe.prototype.reconstructionLoss = function (yTrue, yPred) {
        return tf.tidy(function () {
            var se = tf.pow(tf.sub(yTrue, yPred), 2);
            var nll = tf.div(se, tf.mul(2, tf.pow(tf.ones([1]), 2)));
            return tf.mean(tf.sum(nll, -1));
        });
    };
    MidiMe.prototype.klLoss = function (mu, sigma) {
        return tf.tidy(function () {
            var mu2 = tf.pow(mu, 2);
            var sigma2 = tf.pow(sigma, 2);
            var term1 = tf.add(1, tf.log(sigma2));
            var term2 = tf.add(mu2, sigma2);
            var term = tf.sub(term1, term2);
            var div = tf.div(tf.mean(tf.sum(term, -1)), 2);
            return tf.mul(-1, div);
        });
    };
    MidiMe.prototype.getAffineLayers = function (x, outputSize, z_, softplus) {
        var linear = tf.layers.dense({ units: outputSize });
        var output = linear.apply(x);
        if (softplus) {
            return tf.layers.activation({ activation: 'softplus' }).apply(output);
        }
        else {
            return output;
        }
    };
    return MidiMe;
}());
exports.MidiMe = MidiMe;
//# sourceMappingURL=midi_me.js.map